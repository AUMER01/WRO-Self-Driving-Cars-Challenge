import RPi.GPIO as GPIO
import time

# === Motor and Servo Setup (MD13S version) ===
DIR = 23     # Direction pin
PWM = 18     # Speed (PWM) pin
SERVO_PIN = 17
motor_speed=40
timer=23.478
min_right_servo=3.0
max_right_servo=10.0
# === Ultrasonic Sensors Setup (updated GPIOs) ===
ULTRASONICS = {
    'left': {'TRIG': 22, 'ECHO': 27},
    'front': {'TRIG': 20, 'ECHO': 21},  # Updated to avoid conflict
    'right': {'TRIG': 16, 'ECHO': 5},   # Updated to avoid conflict
}

# === GPIO Setup ===
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

# Motor pins (MD13S)
GPIO.setup(DIR, GPIO.OUT)
GPIO.setup(PWM, GPIO.OUT)

# Servo pin
GPIO.setup(SERVO_PIN, GPIO.OUT)

# Ultrasonic pins
for sensor in ULTRASONICS.values():
    GPIO.setup(sensor['TRIG'], GPIO.OUT)
    GPIO.setup(sensor['ECHO'], GPIO.IN)

# === PWM Setup ===
motor_pwm = GPIO.PWM(PWM, 1000)  # 1 kHz PWM for motor speed
motor_pwm.start(0)

servo_pwm = GPIO.PWM(SERVO_PIN, 50)  # 50 Hz PWM for servo
servo_pwm.start(7.5)  # Start at center

# === Motor and Servo Control ===
def set_motor_forward(speed_percent):
    GPIO.output(DIR, GPIO.HIGH)  # Set forward direction
    motor_pwm.ChangeDutyCycle(speed_percent)

def stop_motor():
    motor_pwm.ChangeDutyCycle(0)

def set_servo_angle(duty):
    servo_pwm.ChangeDutyCycle(duty)

# === Measure Distance ===
def measure_distance(trig_pin, echo_pin):
    GPIO.output(trig_pin, True)
    time.sleep(0.00001)
    GPIO.output(trig_pin, False)

    start_time = time.time()
    stop_time = time.time()

    timeout = time.time() + 0.05  # 50 ms timeout
    while GPIO.input(echo_pin) == 0:
        start_time = time.time()
        if start_time > timeout:
            return None  # Timeout: no echo

    while GPIO.input(echo_pin) == 1:
        stop_time = time.time()
        if stop_time - start_time > 0.05:
            return None

    elapsed = stop_time - start_time
    distance = (elapsed * 34300) / 2  # cm
    return distance

# === Proportional Steering (updated range) ===
def calculate_servo_duty(base_duty, error_cm, max_error_cm=20):
    kp = 1.5 / max_error_cm  # Adjust gain for smooth response
    adjustment = error_cm * kp
    duty = base_duty + adjustment
    duty = max(min_right_servo, min(max_right_servo, duty))  # Clamp to servo limits
    return duty

# === Main Loop ===
try:
    set_motor_forward(motor_speed)  # Set motor speed to ~80%
    BASE_SERVO_DUTY = 7.5  # Centered servo
    start_time = time.time()  # Start timer

    while True:
        # Stop the car after 27 seconds
        if time.time() - start_time > timer:
            print("{timer}  seconds passed. Stopping.")
            stop_motor()
            break

        dist_left = measure_distance(ULTRASONICS['left']['TRIG'], ULTRASONICS['left']['ECHO'])
        dist_right = measure_distance(ULTRASONICS['right']['TRIG'], ULTRASONICS['right']['ECHO'])

        # Handle timeouts (None)
        if dist_left is None:
            dist_left = 100
        if dist_right is None:
            dist_right = 100

        error = dist_left - dist_right  # +ve: too close to right, -ve: too close to left
        servo_duty = calculate_servo_duty(BASE_SERVO_DUTY, error, max_error_cm=20)

        print(f"Left: {dist_left:.1f} cm | Right: {dist_right:.1f} cm | Error: {error:.1f} cm | Servo Duty: {servo_duty:.2f}")

        set_servo_angle(servo_duty)

        time.sleep(0.1)

except KeyboardInterrupt:
    print("Exiting...")

finally:
    motor_pwm.stop()
    servo_pwm.stop()
    GPIO.cleanup()